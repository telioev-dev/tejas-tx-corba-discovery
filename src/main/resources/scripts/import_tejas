#!/bin/bash

# Check if all required parameters are provided
if [ $# -lt 2 ]; then
    echo "Usage: $0 <vendor> <circle>"
    exit 1
fi

# Assign input parameters to variables
vendor="$1"
circle="$2"

# List of entities to process in order
entities=("ME" "EQUIPMENT" "PTP" "TOPOLOGY" "NIA_VIEW" "SNC")

# Log directory and file
log_dir="$TEJAS_STITCHING/logs/$circle/import"
log_file="$log_dir/import.log"

# Ensure log directory exists
mkdir -p "$log_dir"

# Clear the log file or create it if it doesn't exist
> "$log_file"

# Timestamp in ISO-8601 format
timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

# Iterate over entities sequentially
for entity in "${entities[@]}"; do

    entity_log="$log_dir/import_$entity.log"
    echo "Starting discovery for entity: $entity with job: import, vendor: $vendor, circle: $circle" >> "$log_file"

    # Construct command properly with quoted variables
    CMD="$TEJAS_STITCHING/scripts/discover --job=import_tejas --vendor=\"$vendor\" --db_profile=PROD --circle=\"$circle\" --entity=\"$entity\" --timestamp=\"$timestamp\""

    # Add extra argument for NIA_VIEW
    if [ "$entity" == "NIA_VIEW" ]; then
        CMD+=" --view_name=TEJAS_ALL_NIA"
    fi

    echo "CMD to be executed: $CMD" >> "$log_file"

    # Run command safely
    bash -c "$CMD" > "$entity_log" 2>&1 &
    PID=$!

    echo "Launched discover process PID: $PID for entity: $entity" >> "$log_file"

    # Wait for the process to finish and capture its exit code
    wait $PID
    EXIT_CODE=$?

    echo "Completed discovery for entity: $entity with exit code: $EXIT_CODE" >> "$log_file"

    # If any entity fails, exit the script with failure status
    if [ $EXIT_CODE -ne 0 ]; then
        echo "Error: Entity $entity failed with exit code $EXIT_CODE. Aborting!" >> "$log_file"
        exit $EXIT_CODE
    fi

done

echo "All entities processed successfully for job: import, vendor: $vendor, circle: $circle." >> "$log_file"
